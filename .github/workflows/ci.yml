name: CI

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        node:
          - 16.x
        adapter:
          - local
          - redis
          - cluster
        app_manager:
          - array
          - mysql
          - postgres
          - dynamodb

        include:
          - adapter: local
            rate_limiter: local
            queue_driver: sync
          - adapter: cluster
            rate_limiter: cluster
            queue_driver: sync
          - adapter: redis
            rate_limiter: redis
            queue_driver: redis

    name: Node.js ${{ matrix.node }} (adapter:${{ matrix.adapter }} manager:${{ matrix.app_manager }} ratelimiter:${{ matrix.rate_limiter }} queue:${{ matrix.queue_driver }})

    steps:
      - uses: actions/checkout@v2.4.0

      - uses: actions/setup-node@v2.5.1
        name: Setup Node.js v${{ matrix.node }}
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm install

      - name: Execute lint & build
        run: |
          npm run lint
          npm run build

      - uses: zhulik/redis-action@1.1.0
        if: "matrix.adapter == 'redis' || matrix.adapter == 'cluster'"
        name: Setup Redis
        with:
          redis version: 6
          number of databases: 100

      - name: Setup MySQL
        if: "matrix.app_manager == 'mysql'"
        uses: haltuf/mysql-action@master
        with:
          host port: 3306
          container port: 3306
          character set server: utf8mb4
          collation server: utf8mb4_unicode_ci
          mysql version: 8.0
          mysql database: main
          mysql root password: password

      - name: Setup MySQL database
        if: "matrix.app_manager == 'mysql'"
        run: |
          sleep 15
          mysql --host=127.0.0.1 --user=root --password=password --database=main < tests/fixtures/app_mysql.sql

      - name: Setup PostgreSQL
        if: "matrix.app_manager == 'postgres'"
        uses: harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: 13.3
          postgresql db: main
          postgresql user: postgres
          postgresql password: password

      - name: Setup PostgreSQL database
        if: "matrix.app_manager == 'postgres'"
        run: |
          sleep 15
          psql --host=127.0.0.1 --username=postgres main < tests/fixtures/app_postgres.sql
        env:
          PGPASSWORD: password

      - name: Setup DynamoDB
        if: "matrix.app_manager == 'dynamodb'"
        run: |
          java -Djava.library.path=./DynamoDBLocal_lib -jar tests/fixtures/dynamodb/DynamoDBLocal.jar --port 8000 &
          sleep 5

      - name: Setup DynamoDB database
        if: "matrix.app_manager == 'dynamodb'"
        run: node .dynamodb-schema.js
        env:
          AWS_ACCESS_KEY_ID: fake-id
          AWS_SECRET_ACCESS_KEY: fake-secret

      - name: Execute tests
        run: npm run test
        env:
          TEST_ADAPTER: ${{ matrix.adapter }}
          TEST_APP_MANAGER: ${{ matrix.app_manager }}
          TEST_QUEUE_DRIVER: ${{ matrix.queue_driver }}
          TEST_RATE_LIMITER: ${{ matrix.rate_limiter }}
          AWS_ACCESS_KEY_ID: fake-id
          AWS_SECRET_ACCESS_KEY: fake-secret

      - uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
